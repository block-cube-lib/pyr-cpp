/**
 * @file
 * @author    block
 * @copyright (c) 2018 block.
 */

#ifndef PYRITE_RANDOM_RANDOM_HPP
#define PYRITE_RANDOM_RANDOM_HPP

#include <random>

#include <pyrite/core/type.hpp>
#include <pyrite/random/random_state.hpp>

namespace pyrite
{
/**
 * Wrapper standard random number generator and distribution generator.
 */
class random
{
public:
  /**
   * Seed type
   */
  using seed_type = decltype(random_state::seed);

  /**
   * Default constructor.
   *
   * initialized with true random number.
   */
  random();

  /**
   * Constructor initialized with random_state.
   *
   * @param[in] state Random_state object.
   */
  explicit random(random_state const& state);

  /**
   * Constructor initialized with seed.
   *
   * @param[in] seed Seed for initialize random number generator.
   */
  explicit random(seed_type seed);

  /**
   * Copy constructor.
   *
   * @param[in] other original.
   */
  random(random const& other);

  /**
   * Copy constructor.
   *
   * @param[in] other Move source.
   */
  random(random&& other);

  /**
   * Destructor.
   *
   * Generated by compiler.
   */
  ~random() = default;

  /**
   * Generate random number.
   *
   * @tparam T Type of random number.
   *
   * @return If T is integer type, return [std::numeric_limits<T>::min(), std::numeric_limits<T>::max()];
   *         then if T is floating point, type return [0, 1].
   */
  template <typename T>
  auto next();

  /**
   * Generate random number.
   *
   * @tparam T Type of random number.
   * @param min Minimum value of random number
   * @param max Maximum value of random number
   *
   * @return [min, max]
   */
  template <typename T>
  auto next(T const& min, T const& max);

  /**
   * Get seed.
   */
  seed_type seed() const noexcept;

  /**
   * Get object state.
   */
  random_state state() const noexcept;

  /**
   * Advances the internal state by z times.
   * Equivalent to calling next<T>() z times and discarding the result.
   *
   * @param z Integer value specifying the number of times to advance the state by.
   */
  void discard(u64 z);

  /**
   * Reset the random number generator without changing the seed.
   */
  void reset();

  /**
   * Reset the random number generator with the new seed.
   *
   * @param seed new seed.
   */
  void reset(seed_type seed);

  /**
   * Restore ther state of random number generator from state object.
   *
   * @param state state object.
   */
  void reset(random_state const& state);

  /**
   * Compare two random object.
   * Two random objects are equal when state object is the same.
   *
   * @return Return true if state object is the same.
   */
  bool operator==(random const& rhs) const noexcept;

  /**
   * Compare two random object.
   *
   * @return !(*this != rhs);
   */
  bool operator!=(random const& rhs) const noexcept;

  /**
   * Copy assignment operator.
   */
  random& operator=(random const& rhs);

  /**
   * Move assignment operator.
   */
  random& operator=(random&& rhs);

private:
  static seed_type generate_seed();

  random_state    state_;  //!< object state
  std::mt19937_64 engine_; //!< random number generator
};
} // namespace pyrite

#  include <pyrite/random/random.inl>

#endif // PYRITE_RANDOM_RANDOM_HPP

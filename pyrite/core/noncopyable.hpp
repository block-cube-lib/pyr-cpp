/**
 * @file
 * @brief     Define noncopyable.
 *
 * @date      2017/02/27 Create
 *
 * @author    block
 *
 * @copyright 2016 block (c)copyright all rights reserved.
 */

#ifndef PYRITE_CORE_NONCOPYABLE
#define PYRITE_CORE_NONCOPYABLE

namespace pyrite
{

/**
 * class noncopyable cannot be copied.
 * but can be moved.
 */
namespace noncopyable_ //!< protection from unintended ADL
{

class noncopyable
{
public:
  /**
   * Default constructor.
   * generated by the compiler.
   */
  constexpr noncopyable()      = default;

  /**
   * Move constructor.
   * generated by the compiler.
   */
  noncopyable( noncopyable&& ) = default;

  /**
   * Destructor.
   * generated by the compiler.
   */
  ~noncopyable() = default;

  /**
   * Move assignment operator.
   * generated by the compiler.
   */
  constexpr noncopyable& operator=( noncopyable&& ) = default;

  /**
   * Delete copy constructor.
   */
  noncopyable( noncopyable const& ) = delete;

  /**
   * Delete copy assignment operator.
   */
  noncopyable& operator=( noncopyable const& ) = delete;
}; // class noncopyable

} // namespace noncopyable_

using noncopyable = pyrite::noncopyable_::noncopyable;

} // namespace pyrite

#endif // PYRITE_CORE_NONCOPYABLE
